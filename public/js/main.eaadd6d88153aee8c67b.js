"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[179],{9164:function(e,t,n){var r,s,a=n(6687),c=n(4066),o=n(2484),E=n(7492),i=n(49),l=n(9756);(s=r||(r={})).INCREMENT_SEARCHES="items/INCREMENT_SEARCHES",s.DECREMENT_SEARCHES="items/DECREMENT_SEARCHES",s.FETCH_ITEMS="items/FETCH_ITEMS";var m=n(3564);const u=e=>{const t=(0,o.I0)(),n=(0,o.v9)((e=>e.items.searches));return a.createElement("div",{className:"app-container"},a.createElement(m.rU,{to:"/"},"Home"),e.children,a.createElement("h1",null," Searches: ",n),a.createElement("button",{onClick:()=>t((0,l.action)(r.INCREMENT_SEARCHES))},"INCREMENT"))};var h=n(8999),C=n.n(h);var S=()=>{const e=(0,o.v9)((e=>e.items.items)),t=(0,o.I0)();return a.createElement("div",{className:"home"},"HOME",a.createElement("button",{onClick:function(){t((e=>{try{return C().get("/api/items").then((t=>{var n;e((n=t.data,(0,l.action)(r.FETCH_ITEMS,n)))}))}catch(e){alert(e)}}))}},"Get Items"),JSON.stringify(e))};const T=()=>a.createElement(u,null,a.createElement(i.rs,null,a.createElement(i.AW,{exact:!0,path:"/",component:S})));var d=n(6185),I=n(5265),N=n(568),R=n(2620),v=n(4615);const M={searches:0,items:[{test:"testing"}]},g=(e=M,t)=>{switch(t.type){case r.INCREMENT_SEARCHES:return Object.assign(Object.assign({},e),{searches:e.searches+1});case r.DECREMENT_SEARCHES:return Object.assign(Object.assign({},e),{searches:e.searches-1});case r.FETCH_ITEMS:return Object.assign(Object.assign({},e),{items:t.payload});default:return e}};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));const H=(0,d.lX)(),_=function(e,t){const n=(0,R.Uo)({});return(0,I.MT)((e=>(0,I.UY)({items:g,router:(0,E.iz)(e)}))(e),t,n((0,I.md)((0,N.Z)(e),v.Z)))}(H,window.INITIAL_REDUX_STATE);c.render(a.createElement((({store:e,history:t})=>a.createElement(o.zt,{store:e},a.createElement(E.xI,{history:t},a.createElement(T,null)))),{store:_,history:H}),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((e=>{e.unregister()}))}},function(e){e.O(0,[736],(function(){return 9164,e(e.s=9164)})),e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,