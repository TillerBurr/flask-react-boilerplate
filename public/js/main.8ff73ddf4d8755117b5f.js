(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{38:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return c}));Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));function c(){"serviceWorker"in navigator&&navigator.serviceWorker.ready.then(e=>{e.unregister()})}}).call(this,n(28))},64:function(e,t,n){"use strict";n.r(t);var c,a=n(0),r=n(14),s=n(10),o=n(12),i=n(2),E=n(16);!function(e){e.INCREMENT_SEARCHES="items/INCREMENT_SEARCHES",e.DECREMENT_SEARCHES="items/DECREMENT_SEARCHES",e.FETCH_ITEMS="items/FETCH_ITEMS"}(c||(c={}));var l=n(18);const m=e=>{const t=Object(s.d)(),n=Object(s.e)(e=>e.items.searches);return a.createElement("div",{className:"app-container"},a.createElement(l.a,{to:"/"},"Home"),a.createElement("h1",null," Searches: ",n),a.createElement("button",{onClick:()=>t(Object(E.action)(c.INCREMENT_SEARCHES))},"INCREMENT"),e.children)};var u=n(35),h=n.n(u);function b(){return e=>{try{return h.a.get("/api/items").then(t=>{var n;e((n=t.data,Object(E.action)(c.FETCH_ITEMS,n)))})}catch(e){alert(e)}}}var d=()=>{const e=Object(s.e)(e=>e.items.items),t=Object(s.d)();return a.createElement("div",{className:"home"},"HOME",a.createElement("button",{onClick:function(){t(b())}},"Get Items"),JSON.stringify(e))};const S=()=>a.createElement(m,null,a.createElement(i.c,null,a.createElement(i.a,{exact:!0,path:"/",component:d})));var C=({store:e,history:t})=>a.createElement(s.a,{store:e},a.createElement(o.a,{history:t},a.createElement(S,null))),O=n(6),T=n(11),j=n(33),N=n(36),R=n(37);const w={searches:0,items:[{test:"testing"}]},p=(e=w,t)=>{switch(t.type){case c.INCREMENT_SEARCHES:return Object.assign(Object.assign({},e),{searches:e.searches+1});case c.DECREMENT_SEARCHES:return Object.assign(Object.assign({},e),{searches:e.searches-1});case c.FETCH_ITEMS:return Object.assign(Object.assign({},e),{items:t.payload});default:return e}};var v=n(38);const I=Object(O.a)(),M=function(e,t){const n=Object(N.composeWithDevTools)({});return Object(T.createStore)((e=>Object(T.combineReducers)({items:p,router:Object(o.b)(e)}))(e),t,n(Object(T.applyMiddleware)(Object(j.a)(e),R.a)))}(I,window.INITIAL_REDUX_STATE);r.render(a.createElement(C,{store:M,history:I}),document.getElementById("root")),v.a()}},[[64,1,2]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
